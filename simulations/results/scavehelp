scavetool -- part of OMNeT++, (C) 2006-2008 Andras Varga, OpenSim Ltd.
Version: 4.1, build: 100611-4b63c38, edition: Academic Public License -- NOT FOR COMMERCIAL USE

Usage: scavetool <command> [options] <files>...

For processing result files written by simulations: vector files (.vec) and
scalar files (.sca).

Commands:
    v, vector   filter and process data in vector files
    s, scalar   filter and process data in scalar files
    l, list     list summary info about input files
    i, info     print list of available functions (to be used with `-a')
    x, index    generate index files for vector files
Options:
 `vector' command:
    -p <pattern>    the filter expression (see syntax below)
    -a <function>   apply the given processing to the selected vectors (see syntax below);
                    the `info' command prints the names of available operations. This option
                    may occur multiple times.
    -O <filename>   output file name
    -F <formatname> format of output file: vec (default), splitvec, matlab, octave, csv, splitcsv
    -V              print info about progress (verbose)
 `scalar' command:
    -p <pattern>    the filter expression (see syntax below)
    -a <function>   apply the given processing to the selected scalars (see syntax below);
                    the `info' command prints the names of available operations. This option
                    may occur multiple times.
    -O <filename>   output file name
    -F <formatname> format of output file: csv (default), matlab, octave
    -V              print info about progress (verbose)
 `list' command:
    -n   print list of unique statistics names
    -m   print list of unique module name
    -r   print list of unique run Ids
    -c   print list of unique configuration Ids (aka run numbers)
 `info' command:
    -b   list filter names only (brief)
    -s   list filter names with parameter list (summary)
    -v   include descriptions in the output (default)
 `index' command:
    -r   rebuild vector file (rearranges records into blocks)
    -V   print info about progress (verbose)

Function syntax (for `vector -a'): <name>(<parameterlist>).
Examples: winavg(10), mean()

Pattern syntax: one or more <fieldname>(<pattern>) pairs, combined with AND,
OR, NOT operators.
  <fieldname> is one of:
    file:             full path of the result file
    run:              unique run Id
    module:           module full path
    name:             name of the statistic
    attr:experiment:  the experiment attribute of the run
    attr:measurement: the measurement attribute of the run
    attr:replication: the replication attribute of the run
  <pattern> is a glob-like pattern:
    ?             matches any character except '.'
    *             matches zero or more characters, except '.'
    **            matches zero or more characters (any character)
    {a-z}         matches a character in range a-z
    {^a-z}        matches a character NOT in range a-z
    {32..255}     any number (ie. sequence of digits) in range 32..255  (e.g. "99")
    [32..255]     any number in square brackets in range 32..255 (e.g. "[99]")
    \ (backslash) takes away the special meaning of the subsequent character
Pattern example:
    module("**.sink") AND (name("queueing time") OR name("transmission time"))

Examples:
    scavetool vector -p "queueing time" -a winavg(10) -O out.vec *.vec
        Saves the queueing time vectors to out.vec, after applying a window 
        average filter.

    scavetool scalar -p "module(sink) OR module(queue)" -a "scatter(.,load,queue,\"queue length\")" -O out.csv -F csv *.sca
        Creates a scatter plot with the load attribute on the x axis, and queue length
        for iso lines.
