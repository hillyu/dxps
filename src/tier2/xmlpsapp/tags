!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLOOM_K	XmlPsApp.cc	/^const int BLOOM_K=1;$/;"	v
BLOOM_L	XmlPsApp.cc	/^const int BLOOM_L=16;$/;"	v
INCLUDE_BLOOM_FILTER_HPP	bloom_filter.hpp	21;"	d
INCLUDE_SUBGEN_H	subgen.h	2;"	d
MSGC_VERSION	XmlPsAppTracedMessage_m.h	11;"	d
MulticastGroup	XmlPsAppMessageObserver.h	/^            MulticastGroup() : size(0), sent(0), received(0),false_positive(0) {}$/;"	f	struct:XmlPsAppMessageObserver::MulticastGroup
MulticastGroup	XmlPsAppMessageObserver.h	/^        struct MulticastGroup {$/;"	s	class:XmlPsAppMessageObserver
NodeGroupPair	XmlPsAppMessageObserver.h	/^        typedef std::pair<int, OverlayKey> NodeGroupPair;$/;"	t	class:XmlPsAppMessageObserver
NodeMessagePair	XmlPsAppMessageObserver.h	/^        typedef std::pair<int, long> NodeMessagePair;$/;"	t	class:XmlPsAppMessageObserver
SUBFILE	XmlPsApp.cc	/^    std::string SUBFILE="\/Users\/hill\/work\/oversim\/test\/bib.xpelist";$/;"	l
SubGen	subgen.h	/^class SubGen {$/;"	c
SubGen	XmlPsApp.cc	/^SubGen::SubGen():xpe(""),size(0),bloom(0){}$/;"	f	class:SubGen
SubGen	XmlPsApp.cc	/^SubGen::SubGen(bloom_filter& filter){$/;"	f	class:SubGen
XDp_doc	XmlPsApp.cc	/^    TiXmlDocument  XDp_doc;$/;"	l
XMLPSAPP_H_	XmlPsApp.h	17;"	d
XmlPsAppMessageObserver	XmlPsAppMessageObserver.h	/^class XmlPsAppMessageObserver : public cSimpleModule {$/;"	c
XmlPsAppMessageObserver	XmlPsAppMessageObserver.cc	/^XmlPsAppMessageObserver::XmlPsAppMessageObserver() {$/;"	f	class:XmlPsAppMessageObserver
XmlPsAppMessageObserver	XmlPsAppMessageObserver.cc	/^Define_Module(XmlPsAppMessageObserver);$/;"	v
XmlPsAppTracedMessageDescriptor	XmlPsAppTracedMessage_m.cc	/^class XmlPsAppTracedMessageDescriptor : public cClassDescriptor$/;"	c	file:
XmlPsAppTracedMessageDescriptor	XmlPsAppTracedMessage_m.cc	/^XmlPsAppTracedMessageDescriptor::XmlPsAppTracedMessageDescriptor() : cClassDescriptor("XmlPsAppTracedMessage", "ALMTestTracedMessage")$/;"	f	class:XmlPsAppTracedMessageDescriptor
XmlPsAppTracedMessageDescriptor	XmlPsAppTracedMessage_m.cc	/^Register_ClassDescriptor(XmlPsAppTracedMessageDescriptor);$/;"	v
XmlPsAppTracedMessage	XmlPsAppTracedMessage_m.h	/^class XmlPsAppTracedMessage : public ::ALMTestTracedMessage$/;"	c
XmlPsAppTracedMessage	XmlPsAppTracedMessage_m.cc	/^XmlPsAppTracedMessage::XmlPsAppTracedMessage(const XmlPsAppTracedMessage& other) : ALMTestTracedMessage()$/;"	f	class:XmlPsAppTracedMessage
XmlPsAppTracedMessage	XmlPsAppTracedMessage_m.cc	/^XmlPsAppTracedMessage::XmlPsAppTracedMessage(const char *name, int kind) : ALMTestTracedMessage(name,kind)$/;"	f	class:XmlPsAppTracedMessage
XmlPsAppTracedMessage	XmlPsAppTracedMessage_m.cc	/^Register_Class(XmlPsAppTracedMessage);$/;"	v
XmlPsApp	XmlPsApp.h	/^class XmlPsApp : public BaseApp {$/;"	c
XmlPsApp	XmlPsApp.cc	/^XmlPsApp::XmlPsApp() {$/;"	f	class:XmlPsApp
XmlPsApp	XmlPsApp.cc	/^Define_Module(XmlPsApp);$/;"	v
_XMLPSAPPTRACEDMESSAGE_M_H_	XmlPsAppTracedMessage_m.h	6;"	d
__XMLPSAPPMESSAGEOBSERVER_H__	XmlPsAppMessageObserver.h	23;"	d
basedesc	XmlPsAppTracedMessage_m.cc	/^    cClassDescriptor *basedesc = getBaseClassDescriptor();$/;"	l
base	XmlPsAppTracedMessage_m.cc	/^    int base = basedesc ? basedesc->getFieldCount(object) : 0;$/;"	l
bit_index	bloom_filter.hpp	/^         compute_indices(hash_ap(key_begin,length,(*it)),bit_index,bit);$/;"	l
bit_index	bloom_filter.hpp	/^         compute_indices(hash_ap(key_begin,length,(*itr)),bit_index,bit);$/;"	l
bit_index	bloom_filter.hpp	/^      std::size_t bit_index = 0;$/;"	l
bit_mask	bloom_filter.hpp	/^static const unsigned char bit_mask[bits_per_char] = {$/;"	v
bit_table_	bloom_filter.hpp	/^   unsigned char*          bit_table_;$/;"	m	class:bloom_filter
bit	bloom_filter.hpp	/^         compute_indices(hash_ap(key_begin,length,(*it)),bit_index,bit);$/;"	l
bit	bloom_filter.hpp	/^         compute_indices(hash_ap(key_begin,length,(*itr)),bit_index,bit);$/;"	l
bit	bloom_filter.hpp	/^      std::size_t bit = 0;$/;"	l
bits_per_char	bloom_filter.hpp	/^static const std::size_t bits_per_char = 0x08;    \/\/ 8 bits in 1 char(unsigned)$/;"	v
bloom_filter	bloom_filter.hpp	/^class bloom_filter$/;"	c
bloom_filter	bloom_filter.hpp	/^   bloom_filter(const bloom_filter& filter)$/;"	f	class:bloom_filter
bloom_filter	bloom_filter.hpp	/^   bloom_filter(const std::size_t& predicted_element_count,$/;"	f	class:bloom_filter
bloom_filter	bloom_filter.hpp	/^   bloom_filter(std::size_t min_m, std::size_t min_k)$/;"	f	class:bloom_filter
bloom_type	bloom_filter.hpp	/^   typedef unsigned int bloom_type;$/;"	t	class:bloom_filter
bloom	subgen.h	/^	OverlayKey bloom;$/;"	m	class:SubGen
cacheMaxAge	XmlPsAppMessageObserver.h	/^        double cacheMaxAge;$/;"	m	class:XmlPsAppMessageObserver
cell_type	bloom_filter.hpp	/^   typedef unsigned char cell_type;$/;"	t	class:bloom_filter
child	XmlPsApp.cc	/^    TiXmlElement* child = 0;$/;"	l
clear	bloom_filter.hpp	/^   inline void clear()$/;"	f	class:bloom_filter
compress	bloom_filter.hpp	/^   inline bool compress(const double& percentage)$/;"	f	class:compressible_bloom_filter
compressible_bloom_filter	bloom_filter.hpp	/^class compressible_bloom_filter : public bloom_filter$/;"	c
compressible_bloom_filter	bloom_filter.hpp	/^   compressible_bloom_filter(const std::size_t& predicted_element_count,$/;"	f	class:compressible_bloom_filter
compute_indices	bloom_filter.hpp	/^   inline virtual void compute_indices(const bloom_type& hash, std::size_t& bit_index, std::size_t& bit) const$/;"	f	class:bloom_filter
compute_indices	bloom_filter.hpp	/^   inline virtual void compute_indices(const bloom_type& hash, std::size_t& bit_index, std::size_t& bit) const$/;"	f	class:compressible_bloom_filter
contains_all	bloom_filter.hpp	/^   inline InputIterator contains_all(const InputIterator begin, const InputIterator end) const$/;"	f	class:bloom_filter
contains_none	bloom_filter.hpp	/^   inline InputIterator contains_none(const InputIterator begin, const InputIterator end) const$/;"	f	class:bloom_filter
contains	bloom_filter.hpp	/^   inline bool contains(const T& t) const$/;"	f	class:bloom_filter
contains	bloom_filter.hpp	/^   inline bool contains(const char* data, const std::size_t& length) const$/;"	f	class:bloom_filter
contains	bloom_filter.hpp	/^   inline bool contains(const std::string& key) const$/;"	f	class:bloom_filter
contains	bloom_filter.hpp	/^   inline virtual bool contains(const unsigned char* key_begin, const std::size_t length) const$/;"	f	class:bloom_filter
creationTime	XmlPsAppMessageObserver.h	/^        simtime_t creationTime;$/;"	m	class:XmlPsAppMessageObserver
curr_m	bloom_filter.hpp	/^      double curr_m = 0.0;$/;"	l
current_salt	bloom_filter.hpp	/^            bloom_type current_salt = static_cast<bloom_type>(rand()) * static_cast<bloom_type>(rand());$/;"	l
current	XmlPsApp.cc	/^                std::cout<<current<<"\\n";$/;"	l
current	XmlPsApp.cc	/^                std::cout<<parent+current<<"\\n";$/;"	l
current	XmlPsApp.cc	/^    std::string current;$/;"	l
desired_false_positive_probability_	bloom_filter.hpp	/^   double                  desired_false_positive_probability_;$/;"	m	class:bloom_filter
doPacking	XmlPsAppTracedMessage_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	XmlPsAppTracedMessage_m.h	/^inline void doPacking(cCommBuffer *b, XmlPsAppTracedMessage& obj) {obj.parsimPack(b);}$/;"	f
doUnpacking	XmlPsAppTracedMessage_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	XmlPsAppTracedMessage_m.h	/^inline void doUnpacking(cCommBuffer *b, XmlPsAppTracedMessage& obj) {obj.parsimUnpack(b);}$/;"	f
doesSupport	XmlPsAppTracedMessage_m.cc	/^bool XmlPsAppTracedMessageDescriptor::doesSupport(cObject *obj) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
dup	XmlPsAppTracedMessage_m.h	/^    virtual XmlPsAppTracedMessage *dup() const {return new XmlPsAppTracedMessage(*this);}$/;"	f	class:XmlPsAppTracedMessage
effective_fpp	bloom_filter.hpp	/^   inline double effective_fpp() const$/;"	f	class:bloom_filter
element_count	bloom_filter.hpp	/^   inline std::size_t element_count() const$/;"	f	class:bloom_filter
end	bloom_filter.hpp	/^      cell_type* end = bit_table_ + (original_table_size \/ bits_per_char);$/;"	l
evaluateXpe	XmlPsApp.cc	/^bool XmlPsApp::evaluateXpe(std::string xmlfilename){$/;"	f	class:XmlPsApp
expandJoin	XmlPsApp.h	/^	bool expandJoin;$/;"	m	class:XmlPsApp
false_positive_var	XmlPsAppTracedMessage_m.h	/^    bool false_positive_var;$/;"	m	class:XmlPsAppTracedMessage
false_positive	XmlPsAppMessageObserver.h	/^            uint64_t false_positive;$/;"	m	struct:XmlPsAppMessageObserver::MulticastGroup
fieldNames	XmlPsAppTracedMessage_m.cc	/^    static const char *fieldNames[] = {$/;"	l	file:
fieldStructNames	XmlPsAppTracedMessage_m.cc	/^    static const char *fieldStructNames[] = {$/;"	l	file:
fieldTypeFlags	XmlPsAppTracedMessage_m.cc	/^    static unsigned int fieldTypeFlags[] = {$/;"	l	file:
fieldTypeStrings	XmlPsAppTracedMessage_m.cc	/^    static const char *fieldTypeStrings[] = {$/;"	l	file:
filestatus	XmlPsApp.cc	/^    struct stat filestatus;$/;"	l
findField	XmlPsAppTracedMessage_m.cc	/^int XmlPsAppTracedMessageDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
find_optimal_parameters	bloom_filter.hpp	/^   void find_optimal_parameters()$/;"	f	class:bloom_filter
finish	XmlPsAppMessageObserver.cc	/^void XmlPsAppMessageObserver::finish() {$/;"	f	class:XmlPsAppMessageObserver
gcInterval	XmlPsAppMessageObserver.h	/^        double gcInterval;$/;"	m	class:XmlPsAppMessageObserver
gcTimer	XmlPsAppMessageObserver.h	/^        cMessage* gcTimer;$/;"	m	class:XmlPsAppMessageObserver
generate_unique_salt	bloom_filter.hpp	/^   void generate_unique_salt()$/;"	f	class:bloom_filter
getArraySize	XmlPsAppTracedMessage_m.cc	/^int XmlPsAppTracedMessageDescriptor::getArraySize(void *object, int field) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getBloom	subgen.h	/^	OverlayKey getBloom() const {return bloom;}$/;"	f	class:SubGen
getFalse_positive	XmlPsAppTracedMessage_m.cc	/^bool XmlPsAppTracedMessage::getFalse_positive() const$/;"	f	class:XmlPsAppTracedMessage
getFieldAsString	XmlPsAppTracedMessage_m.cc	/^std::string XmlPsAppTracedMessageDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getFieldCount	XmlPsAppTracedMessage_m.cc	/^int XmlPsAppTracedMessageDescriptor::getFieldCount(void *object) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getFieldName	XmlPsAppTracedMessage_m.cc	/^const char *XmlPsAppTracedMessageDescriptor::getFieldName(void *object, int field) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getFieldProperty	XmlPsAppTracedMessage_m.cc	/^const char *XmlPsAppTracedMessageDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getFieldStructName	XmlPsAppTracedMessage_m.cc	/^const char *XmlPsAppTracedMessageDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getFieldStructPointer	XmlPsAppTracedMessage_m.cc	/^void *XmlPsAppTracedMessageDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getFieldTypeFlags	XmlPsAppTracedMessage_m.cc	/^unsigned int XmlPsAppTracedMessageDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getFieldTypeString	XmlPsAppTracedMessage_m.cc	/^const char *XmlPsAppTracedMessageDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getProperty	XmlPsAppTracedMessage_m.cc	/^const char *XmlPsAppTracedMessageDescriptor::getProperty(const char *propertyname) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
getSize	subgen.h	/^	uint32_t  getSize(){return size;}$/;"	f	class:SubGen
getXmlFileName	XmlPsAppTracedMessage_m.cc	/^const char * XmlPsAppTracedMessage::getXmlFileName() const$/;"	f	class:XmlPsAppTracedMessage
getXpe	subgen.h	/^	std::string getXpe(){return xpe;}$/;"	f	class:SubGen
globalStatistics	XmlPsAppMessageObserver.h	/^        GlobalStatistics* globalStatistics;$/;"	m	class:XmlPsAppMessageObserver
groupNum	XmlPsApp.h	/^	int groupNum;$/;"	m	class:XmlPsApp
groups	XmlPsAppMessageObserver.h	/^        std::map<OverlayKey, MulticastGroup> groups;$/;"	m	class:XmlPsAppMessageObserver
handleLowerMessage	XmlPsApp.cc	/^void XmlPsApp::handleLowerMessage(cMessage* msg)$/;"	f	class:XmlPsApp
handleMCast	XmlPsApp.cc	/^void XmlPsApp::handleMCast( ALMMulticastMessage* mcast )$/;"	f	class:XmlPsApp
handleMessage	XmlPsAppMessageObserver.cc	/^void XmlPsAppMessageObserver::handleMessage(cMessage* msg) {$/;"	f	class:XmlPsAppMessageObserver
handleReadyMessage	XmlPsApp.cc	/^void XmlPsApp::handleReadyMessage(CompReadyMessage* msg)$/;"	f	class:XmlPsApp
handleTimerEvent	XmlPsApp.cc	/^void XmlPsApp::handleTimerEvent( cMessage* msg )$/;"	f	class:XmlPsApp
hash_ap	bloom_filter.hpp	/^   bloom_type hash_ap(const unsigned char* begin, std::size_t remaining_length, bloom_type hash) const$/;"	f	class:bloom_filter
iGroup	XmlPsAppMessageObserver.cc	/^    std::map<OverlayKey, MulticastGroup>::iterator iGroup;$/;"	l
iJoinInfo	XmlPsAppMessageObserver.cc	/^        std::map<NodeGroupPair, simtime_t>::iterator iJoinInfo;$/;"	l
iPrev	XmlPsAppMessageObserver.cc	/^        std::map<NodeMessagePair, simtime_t>::iterator i, iPrev;$/;"	l
i	XmlPsApp.cc	/^            int i=intuniform(1, subscribeList.size());$/;"	l
i	XmlPsApp.cc	/^    int i=0;$/;"	l
i	XmlPsAppMessageObserver.cc	/^        std::map<NodeMessagePair, simtime_t>::iterator i, iPrev;$/;"	l
initializeApp	XmlPsApp.cc	/^void XmlPsApp::initializeApp(int stage)$/;"	f	class:XmlPsApp
initialize	XmlPsAppMessageObserver.cc	/^void XmlPsAppMessageObserver::initialize() {$/;"	f	class:XmlPsAppMessageObserver
inserted_element_count_	bloom_filter.hpp	/^   std::size_t             inserted_element_count_;$/;"	m	class:bloom_filter
insert	bloom_filter.hpp	/^   inline void insert(const InputIterator begin, const InputIterator end)$/;"	f	class:bloom_filter
insert	bloom_filter.hpp	/^   inline void insert(const T& t)$/;"	f	class:bloom_filter
insert	bloom_filter.hpp	/^   inline void insert(const char* data, const std::size_t& length)$/;"	f	class:bloom_filter
insert	bloom_filter.hpp	/^   inline void insert(const std::string& key)$/;"	f	class:bloom_filter
insert	bloom_filter.hpp	/^   inline void insert(const unsigned char* key_begin, const std::size_t& length)$/;"	f	class:bloom_filter
isblrepeat	XmlPsApp.cc	/^            bool isblrepeat=false;$/;"	l
isrepeat	XmlPsApp.cc	/^            bool isrepeat=false;$/;"	l
it_tmp	bloom_filter.hpp	/^      cell_type* it_tmp = tmp;$/;"	l
iter	XmlPsAppMessageObserver.cc	/^    std::map<OverlayKey, MulticastGroup>::iterator iter = groups.find(groupId);$/;"	l
iter	XmlPsAppMessageObserver.cc	/^    std::map<OverlayKey, MulticastGroup>::iterator iter;$/;"	l
it	bloom_filter.hpp	/^      cell_type* it = bit_table_ + (new_table_size \/ bits_per_char);$/;"	l
it	bloom_filter.hpp	/^      const unsigned char* it = begin;$/;"	l
itr	bloom_filter.hpp	/^      InputIterator itr = begin;$/;"	l
joinGroup	XmlPsApp.cc	/^void XmlPsApp::joinGroup(OverlayKey ovkey)$/;"	f	class:XmlPsApp
joinGroups	XmlPsApp.h	/^	bool joinGroups;$/;"	m	class:XmlPsApp
joinedAt	XmlPsAppMessageObserver.h	/^        std::map<NodeGroupPair, simtime_t> joinedAt;$/;"	m	class:XmlPsAppMessageObserver
joinedGroup	XmlPsAppMessageObserver.cc	/^void XmlPsAppMessageObserver::joinedGroup(int moduleId, OverlayKey groupId) {$/;"	f	class:XmlPsAppMessageObserver
leaveGroup	XmlPsApp.cc	/^void XmlPsApp::leaveGroup(OverlayKey ovkey)$/;"	f	class:XmlPsApp
leftGroup	XmlPsAppMessageObserver.cc	/^void XmlPsAppMessageObserver::leftGroup(int moduleId, OverlayKey groupId) {$/;"	f	class:XmlPsAppMessageObserver
length	bloom_filter.hpp	/^      insert(reinterpret_cast<const unsigned char*>(data),length);$/;"	l
line	XmlPsApp.cc	/^    std::string line ;$/;"	l
maxSubscription	XmlPsApp.h	/^	int maxSubscription;$/;"	m	class:XmlPsApp
mcast	XmlPsApp.cc	/^    ALMMulticastMessage* mcast = dynamic_cast<ALMMulticastMessage*>(msg);$/;"	l
message	XmlPsAppMessageObserver.cc	/^        std::stringstream message;$/;"	l
min_k	bloom_filter.hpp	/^      double min_k = 0.0;$/;"	l
min_m	bloom_filter.hpp	/^      double min_m = std::numeric_limits<double>::infinity();$/;"	l
msg	XmlPsApp.cc	/^    ALMLeaveMessage* msg = new ALMLeaveMessage;$/;"	l
msg	XmlPsApp.cc	/^    ALMMulticastMessage* msg = new ALMMulticastMessage("Multicast message");$/;"	l
msg	XmlPsApp.cc	/^    ALMSubscribeMessage* msg = new ALMSubscribeMessage;$/;"	l
msglen	XmlPsApp.h	/^	int msglen;$/;"	m	class:XmlPsApp
name	XmlPsAppMessageObserver.cc	/^        std::string name;$/;"	l
new_table_size	bloom_filter.hpp	/^      std::size_t new_table_size = static_cast<std::size_t>((size_list.back() * (1.0 - (percentage \/ 100.0))));$/;"	l
ngp	XmlPsAppMessageObserver.cc	/^        NodeGroupPair ngp = NodeGroupPair(moduleId, ig->first);$/;"	l
nlines	XmlPsApp.cc	/^    int nlines = 0 ;$/;"	l
nmp	XmlPsAppMessageObserver.cc	/^            NodeMessagePair nmp = NodeMessagePair(msg->getReceiverId(), msg->getMcastId());$/;"	l
nodeDead	XmlPsAppMessageObserver.cc	/^void XmlPsAppMessageObserver::nodeDead(int moduleId) {$/;"	f	class:XmlPsAppMessageObserver
now	XmlPsAppMessageObserver.cc	/^        simtime_t now = OPP::simTime();$/;"	l
numLooped	XmlPsAppMessageObserver.h	/^        int numLooped;$/;"	m	class:XmlPsAppMessageObserver
operator !	bloom_filter.hpp	/^   inline bool operator!() const$/;"	f	class:bloom_filter
operator &=	bloom_filter.hpp	/^   bloom_filter& operator &= (const bloom_filter& filter)$/;"	f	class:bloom_filter
operator &	bloom_filter.hpp	/^bloom_filter operator & (const bloom_filter& a, const bloom_filter& b)$/;"	f
operator <<	XmlPsApp.cc	/^std::ostream & operator <<(std::ostream & os,  SubGen  & subg)$/;"	f
operator <<	XmlPsAppMessageObserver.cc	/^std::ostream& operator<< (std::ostream& os, XmlPsAppMessageObserver::MulticastGroup const & mg) {$/;"	f
operator <<	XmlPsAppTracedMessage_m.cc	/^std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator =	XmlPsAppTracedMessage_m.cc	/^XmlPsAppTracedMessage& XmlPsAppTracedMessage::operator=(const XmlPsAppTracedMessage& other)$/;"	f	class:XmlPsAppTracedMessage
operator =	bloom_filter.hpp	/^   bloom_filter& operator = (const bloom_filter& filter)$/;"	f	class:bloom_filter
operator ^=	bloom_filter.hpp	/^   bloom_filter& operator ^= (const bloom_filter& filter)$/;"	f	class:bloom_filter
operator ^	bloom_filter.hpp	/^bloom_filter operator ^ (const bloom_filter& a, const bloom_filter& b)$/;"	f
operator |=	bloom_filter.hpp	/^   bloom_filter& operator |= (const bloom_filter& filter)$/;"	f	class:bloom_filter
operator |	bloom_filter.hpp	/^bloom_filter operator | (const bloom_filter& a, const bloom_filter& b)$/;"	f
ovkey	XmlPsApp.cc	/^        EV<<"Original Key to subscribe is : "<<ovkey<<"\\n";$/;"	l
ovkey	XmlPsApp.cc	/^    xmlpsapp_observer->joinedGroup(getId(), ovkey);$/;"	l
ovkey	XmlPsApp.cc	/^    xmlpsapp_observer->leftGroup(getId(), ovkey);$/;"	l
parseXpe	XmlPsApp.cc	/^void SubGen::parseXpe(std::string xpstr, bloom_filter* bl,std::string parent, int &i){$/;"	f	class:SubGen
parsimPack	XmlPsAppTracedMessage_m.cc	/^void XmlPsAppTracedMessage::parsimPack(cCommBuffer *b)$/;"	f	class:XmlPsAppTracedMessage
parsimUnpack	XmlPsAppTracedMessage_m.cc	/^void XmlPsAppTracedMessage::parsimUnpack(cCommBuffer *b)$/;"	f	class:XmlPsAppTracedMessage
pathlist	XmlPsApp.cc	/^    EV << "The PathList is "<<pathlist<<"\\n";$/;"	l
pathlist	XmlPsApp.cc	/^    std::string pathlist = "..\/samplefiles\/xmldocs\/filelist2.txt";$/;"	l
pp	XmlPsAppTracedMessage_m.cc	/^    XmlPsAppTracedMessage *pp = (XmlPsAppTracedMessage *)object; (void)pp;$/;"	l
predef_salt_count	bloom_filter.hpp	/^      const unsigned int predef_salt_count = 128;$/;"	l
predef_salt	bloom_filter.hpp	/^      static const bloom_type predef_salt[predef_salt_count] =$/;"	l
predicted_element_count_	bloom_filter.hpp	/^   std::size_t             predicted_element_count_;$/;"	m	class:bloom_filter
random_line	XmlPsApp.cc	/^std::string SubGen::random_line(std::string filepath)$/;"	f	class:SubGen
random_seed_	bloom_filter.hpp	/^   std::size_t             random_seed_;$/;"	m	class:bloom_filter
random	XmlPsApp.cc	/^        double random = uniform( 0, 1 );$/;"	l
receivedAt	XmlPsAppMessageObserver.h	/^        std::map<NodeMessagePair, simtime_t> receivedAt;$/;"	m	class:XmlPsAppMessageObserver
receivedMessage	XmlPsAppMessageObserver.cc	/^void XmlPsAppMessageObserver::receivedMessage(XmlPsAppTracedMessage* msg) {$/;"	f	class:XmlPsAppMessageObserver
received	XmlPsAppMessageObserver.h	/^            uint64_t received;$/;"	m	struct:XmlPsAppMessageObserver::MulticastGroup
recursiveJoin	XmlPsApp.cc	/^void XmlPsApp::recursiveJoin(OverlayKey ovkey, int i){$/;"	f	class:XmlPsApp
recursivex2b	XmlPsApp.cc	/^void XmlPsApp::recursivex2b(TiXmlElement* parent, bloom_filter & bloomfilter){$/;"	f	class:XmlPsApp
result	bloom_filter.hpp	/^   bloom_filter result = a;$/;"	l
salt_count_	bloom_filter.hpp	/^   std::size_t             salt_count_;$/;"	m	class:bloom_filter
salt_	bloom_filter.hpp	/^   std::vector<bloom_type> salt_;$/;"	m	class:bloom_filter
selected_line	XmlPsApp.cc	/^    std::string selected_line ; \/\/ added$/;"	l
sendDataToGroup	XmlPsApp.cc	/^void XmlPsApp::sendDataToGroup(OverlayKey ovkey,std::string data){$/;"	f	class:XmlPsApp
sendMessages	XmlPsApp.h	/^	bool sendMessages;$/;"	m	class:XmlPsApp
sentMessage	XmlPsAppMessageObserver.cc	/^void XmlPsAppMessageObserver::sentMessage(XmlPsAppTracedMessage* msg) {$/;"	f	class:XmlPsAppMessageObserver
sent	XmlPsAppMessageObserver.h	/^            uint64_t sent;$/;"	m	struct:XmlPsAppMessageObserver::MulticastGroup
setFalse_positive	XmlPsAppTracedMessage_m.cc	/^void XmlPsAppTracedMessage::setFalse_positive(bool false_positive_var)$/;"	f	class:XmlPsAppTracedMessage
setFieldAsString	XmlPsAppTracedMessage_m.cc	/^bool XmlPsAppTracedMessageDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:XmlPsAppTracedMessageDescriptor
setXmlFileName	XmlPsAppTracedMessage_m.cc	/^void XmlPsAppTracedMessage::setXmlFileName(const char * xmlFileName_var)$/;"	f	class:XmlPsAppTracedMessage
size_list	bloom_filter.hpp	/^   std::vector<std::size_t> size_list;$/;"	m	class:compressible_bloom_filter
size	bloom_filter.hpp	/^   inline virtual std::size_t size() const$/;"	f	class:bloom_filter
size	bloom_filter.hpp	/^   inline virtual std::size_t size() const$/;"	f	class:compressible_bloom_filter
size	XmlPsAppMessageObserver.h	/^            uint32_t size;$/;"	m	struct:XmlPsAppMessageObserver::MulticastGroup
size	subgen.h	/^	uint32_t size;$/;"	m	class:SubGen
subRate	XmlPsApp.h	/^	double subRate;$/;"	m	class:XmlPsApp
subscribeList	XmlPsApp.h	/^	std::vector<SubGen> subscribeList;$/;"	m	class:XmlPsApp
subscribe	XmlPsApp.cc	/^void XmlPsApp::subscribe(OverlayKey ovkey){$/;"	f	class:XmlPsApp
table_size_	bloom_filter.hpp	/^   std::size_t             table_size_;$/;"	m	class:bloom_filter
table	bloom_filter.hpp	/^   const cell_type* table() const { return bit_table_; }$/;"	f	class:bloom_filter
time	XmlPsAppMessageObserver.cc	/^    simtime_t time = globalStatistics->calcMeasuredLifetime(creationTime);$/;"	l
timer	XmlPsApp.h	/^	cMessage* timer;$/;"	m	class:XmlPsApp
tmpkey	XmlPsApp.cc	/^            OverlayKey tmpkey=ovkey;$/;"	l
tmp	bloom_filter.hpp	/^      cell_type* tmp = new cell_type[new_table_size \/ bits_per_char];$/;"	l
totalReceived	XmlPsAppMessageObserver.cc	/^    uint64_t totalReceived = 0;$/;"	l
totalSent	XmlPsAppMessageObserver.cc	/^    uint64_t totalSent = 0;$/;"	l
traced	XmlPsApp.cc	/^    XmlPsAppTracedMessage* traced = check_and_cast<XmlPsAppTracedMessage*>(mcast->decapsulate());$/;"	l
traced	XmlPsApp.cc	/^    XmlPsAppTracedMessage* traced = new XmlPsAppTracedMessage("Traced message");$/;"	l
unsubRate	XmlPsApp.h	/^	double unsubRate;$/;"	m	class:XmlPsApp
xml2bloom	XmlPsApp.cc	/^OverlayKey XmlPsApp::xml2bloom(std::string xmlfilename){$/;"	f	class:XmlPsApp
xmlFileName_var	XmlPsAppTracedMessage_m.h	/^    opp_string xmlFileName_var;$/;"	m	class:XmlPsAppTracedMessage
xmlGen	XmlPsApp.cc	/^std::string XmlPsApp::xmlGen()$/;"	f	class:XmlPsApp
xmlfile	XmlPsApp.cc	/^            sendDataToGroup(xml2bloom(xmlfile),xmlfile);$/;"	l
xmlfile	XmlPsApp.cc	/^            std::string xmlfile=xmlGen();$/;"	l
xmlfile	XmlPsApp.cc	/^    EV << "The XMLFILE INPUT is"<<xmlfile<<"\\n";$/;"	l
xmlfile	XmlPsApp.cc	/^    std::string xmlfile=SubGen::random_line(pathlist);$/;"	l
xmlpsapp_observer	XmlPsApp.h	/^	XmlPsAppMessageObserver* xmlpsapp_observer;$/;"	m	class:XmlPsApp
xpe	subgen.h	/^	std::string xpe;$/;"	m	class:SubGen
~XmlPsAppMessageObserver	XmlPsAppMessageObserver.cc	/^XmlPsAppMessageObserver::~XmlPsAppMessageObserver() {$/;"	f	class:XmlPsAppMessageObserver
~XmlPsAppTracedMessageDescriptor	XmlPsAppTracedMessage_m.cc	/^XmlPsAppTracedMessageDescriptor::~XmlPsAppTracedMessageDescriptor()$/;"	f	class:XmlPsAppTracedMessageDescriptor
~XmlPsAppTracedMessage	XmlPsAppTracedMessage_m.cc	/^XmlPsAppTracedMessage::~XmlPsAppTracedMessage()$/;"	f	class:XmlPsAppTracedMessage
~XmlPsApp	XmlPsApp.cc	/^XmlPsApp::~XmlPsApp() {$/;"	f	class:XmlPsApp
~bloom_filter	bloom_filter.hpp	/^   virtual ~bloom_filter()$/;"	f	class:bloom_filter
