//
// Copyright (C) 2006 Institut fuer Telematik, Universitaet Karlsruhe (TH)
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//

/**
 * @file Dxps.h
 * @author Stephan Krause
 */
//TODO: Need to add a sublist for every routingtable(virtual), create a pubdeliver msg.
//once recieve pubcall, first check childlist-> forward, then check sublist --send pubdeliver msg

#ifndef __DXPS_H_
#include <map>
#include <string>

#include "BaseApp.h"
#include "CommonMessages_m.h"
#include "GlobalNodeList.h"
#include "NodeHandle.h"

#include "DxpsRoutingTable.h"
#include "DxpsMessage_m.h"

// Output function for RoutingTableList, needed for WATCH
std::ostream& operator<< (std::ostream& o, std::map<OverlayKey, DxpsRoutingTable> m )
{
    for (std::map<OverlayKey, DxpsRoutingTable>::iterator it = m.begin(); it != m.end(); ++it) {
        o << it->first << "\n";
       // o << "  Parent: " << it->second.getParent() << "\n";
        o << "  Status: " << (it->second.getSubscription() ? "subscriber\n" : "\n")<< (it->second.getIsForwarder() ? "Forwarder\n" : "\n");
        o << "  Children (" << it->second.numChildren() << "):\n";
        typedef std::set <bloom_filter> FilterList;//OverlayKey type is used to represent the bit-array.
                typedef std::pair<NodeHandle, FilterList> NfPair;

        std::map<OverlayKey, NfPair>::iterator iit = it->second.getChildrenBegin();
        for (int i = it->second.numChildren(); i > 0; --i) {
            o << "   OverlayKey: " << iit->first<<"  NodeHandler:"<<iit->second.first;
            o <<" Filters:";
            FilterList::iterator filter_iterator=iit->second.second.begin();
            for (size_t ti = 0; ti < iit->second.second.size(); ++ti)
            {
              o<<"[";
              for (size_t ii = 0; ii < filter_iterator->size()/bits_per_char; ++ii)
              {
              o<<(int) (filter_iterator->table()[ii]);
              }
              o<<"]";
              filter_iterator++;
            }
            ++iit;
            o<<"\n";
        }
    }
    return o;
}


class Dxps : public BaseApp
{
    private:
        typedef std::map<OverlayKey, DxpsRoutingTable> RoutingTableList;
        RoutingTableList routingTableList;
        typedef bloom_filter filtertype;
        typedef std::set <bloom_filter> FilterList;//OverlayKey type is used to represent the bit-array.
        typedef std::pair<NodeHandle, FilterList> NfPair;
        typedef std::pair<OverlayKey, NfPair> Children;
        typedef std::multimap<NodeHandle, DxpsTimer*> ChildTimeoutList;
        ChildTimeoutList childTimeoutList;

        int childTimeout;
        int parentTimeout;
        bool  subscriptionfilter; 
        DxpsTimer* subscriptionTimer;

        // statistics
        int numJoins;
        int numChildTimeout;
        int numParentTimeout;
        int numForward;
        int forwardBytes;
        int numReceived;
        int receivedBytes;
        int numHeartbeat;
        int heartbeatBytes;
        int numSubscriptionRefresh;
        int subscriptionRefreshBytes;
        std::vector<long int> msgLog;
        //bool isForwarder;// in routingTable already.
        bool keycompare(bloom_filter subKey,bloom_filter pubKey);

    public:
        Dxps( );
        ~Dxps( );

        // see BaseOverlay.h
        virtual void initializeApp( int stage );

        virtual void handleUpperMessage( cMessage *msg );
        virtual void handleReadyMessage( CompReadyMessage* msg );

        virtual void handleTimerEvent( cMessage *msg );

        virtual bool handleRpcCall( BaseCallMessage* msg );
        virtual void handleRpcResponse( BaseResponseMessage* msg,
                                        cPolymorphic* context,
                                        int rpcId, simtime_t rtt );

        virtual void forward(OverlayKey* key, cPacket** msg,
                NodeHandle* nextHopNode);

        virtual void deliver(OverlayKey& key, cMessage* msg);
        virtual void update( const NodeHandle& node, bool joined );

        virtual void finishApp( );

        bool  matchit(FilterList fromTable, bloom_filter pubKey);
    protected:
        /**
         * Handles a response to a join call send by this node
         */
        void handleJoinResponse( DxpsJoinResponse* joinResponse );

        /**
         * Handles a join request from another node
         *
         * This method only gets called if the local node is the root of the
         * multicast routingTable. It only calls handlePublishCall with amIRoot
         * parameter set to "true"
        */
        void handleJoinCall( DxpsJoinCall* joinMsg);

        /**
         * Handles a publish call from another node
         *
         * Publish calls are used to send multicast messages to the root
         * of the multicast tree.
         */
        void handlePublishCall( DxpsPublishCall* publishCall );

        /**
         * Handles a response to a publish call send b this node
         *
         * Publish calls are used to send multicast messages to the root
         * of the multicast tree.
         */
        void handlePublishResponse( DxpsPublishResponse* publishResponse );

        /**
         * Handles join requests from other nodes
         */
        void handleJoinMessage( DxpsJoinCall* joinMsg, bool amIRoot);

        /**
         * Handles leave requests from other nodes
         */
        void handleLeaveMessage( DxpsLeaveMessage* leaveMsg );

        /**
         * Gets called if the local node wants to subscribe to a multicast routingTable
         *
         * @param groupId the ID of the routingTable to join
         */
        void subscribeToGroup( ALMSubscribeMessage* subMsg );

        /**
         * Gets called if the local node wants to leave a multicast routingTable
         *
         * @param routingTable the ID of the routingTable to leave
         */
        void leaveGroup( const OverlayKey& routingTable );

        /**
         * Starts a local timer
         *
         * This method automaticly determines the type of the timer
         * and schedules it accordingly. If the timer is already scheduled,
         * it gets canceled before getting rescheduled.
         */
        void startTimer( DxpsTimer* timer );

        /**
         * Adds a child to a multicast routingTable
         */
        void addChildToRoutingTable( const Children& child, DxpsRoutingTable& routingTable );

        /**
         * Removes a child from a  routingTable
         */
        void removeChildFromGroup( const NodeHandle& child, DxpsRoutingTable& routingTable );

        /**
         * Removes a child from a  routingTable
         *
         * Both the child and the routingTable are determined from the timer message
         * This method gets calld if a subscription timer of a child expires.
         */
        void removeChildFromGroup( DxpsTimer* timer );

        /**
         * Chechs wheter there are any subscibers left to a given root
         */
        void checkGroupEmpty( DxpsRoutingTable& routingTable );

        /**
         * Refreshes a child timer
         *
         * If a child sends a subscribtion refresh, this method gets called.
         * It finds the subscriptionTimeout timer for the routingTable and reschedules it.
         */
        void refreshChildTimer( NodeHandle& child, OverlayKey& groupId );

        /**
         * Delivers a multicast message to all children in the multicast routingTable
         */
        void deliverALMDataToGroup( DxpsDataMessage* dataMsg );

        /**
         * Delivers a multicast message to the tree's root
         *
         * This method gets called when the local app wants to publish some data
         * to the multiacst routingTable.
         */
        void deliverALMDataToRoot( ALMMulticastMessage* mcastMsg );
        void formHyperCube();
        void getParents(OverlayKey mykey, OverlayKey fromKey, DxpsSubscriptionMessage* DXPSsubMsg);
};

#endif
